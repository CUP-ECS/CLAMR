
////////////////////////
// Useful bash commands
////////////////////////

// logistics
locate [file]	// find file in directory
history		// see history of bash commands
source [file]	// read this file (in a shell form)

// code checking
valgrind	// check memory errors
// To run valgrind with libtool built code
libtool --mode=execute valgrind --tool=memcheck --leak-check=full --show-reachable=yes --track-origins=yes --leak-resolution=high --num-callers=20 --log-file=vgdump clamr_cpuonly -n 16 -i 1 -t 1

ddd		// debugger
totalview (there is a module on yellowrail and turing)

// code compiling
//
// Use configure which takes various commands for install directory,
// location of libraries, etc.
// 
//configure --help		// shows help menu
//configure --enable-debug	// enter debug mode
//configure --prefix		// install directory
//configure --enable-prof		// profiling, turns on flags for gprof

// We have switched to cmake so the configure step is 
cmake .                         // in-tree build
cmake <path-to-src>             // out-of-tree build
cmake -DCMAKE_BUILD_TYPE=debug <path-to-src>
cmake -DCMAKE_BUILD_TYPE=release <path-to-src>

cmake -DGRAPHICS_TYPE=None   <path-to-src>  // Turn off real-time graphics
cmake -DGRAPHICS_TYPE=OpenGL <path-to-src>  // Default
cmake -DGRAPHICS_TYPE=MPE    <path-to-src>  // Alternate real-time graphics

//
// need to edit configure.ac (b/c using autoconf package)
//
make				// builds the executable
make install			// copy the executable to destination
make clean			// restores to the pre-make step
make distclean			// restores to the pre-configure step
make installcheck		// not always there
make dist			// builds new distro into a new tar file
//
// need to edit Makefile.am (b/c using automake package)
//

/////////////////////
// Environment Setup
/////////////////////

// Update .bashrc by setting editor and loading modules
export EDITOR=vim
module load cuda
module load openmpi-gcc/1.4.1-64


/////////////////////
// Darwin
/////////////////////
To build on Darwin, The OpenCL libraries needed to build are only 
available on back-end nodes.  To get a node do:

Get a list of hardware partitions
% sinfo 

For a generic tesla. The Kepler can be requested with the "K20" partition
% salloc -p tesla -N 1
% ssh $SLURM_NODELIST

The following modules should be loaded. This line can also be added
to the .login file to make it automatic
% module load cmake/2.8.10.2 mpi/openmpi-1.6.4-gcc-4.4.7

You must use a special version of GCC for CUDA that is not the default
compiler on Darwin.  To use the correct compiler do:

% export PATH=/home/opt/gcc/4.4.6/bin:$PATH

Totalview on darwin
% module load totalview/8.11.0-2
% totalview <executable> -a <program command line>

Example
% totalview mpirun -a -n 2 ./clamr_mpionly -n 512 -l 2 -i 100 -t 10000

////////////////
// Moonlight
////////////////

%ssh -Y ml-fey

Get a backend node. The -nn is the number of nodes and the -np is the number
of processors per node
%llogin -nn 1 -np 8

Load modules
% module load gcc/4.7.2 openmpi/1.6.3  opencl/1.1

Add the following to the .login and you can select the gcc or intel compiler with
source ~/.login intel (for intel) or source ~/.login (for gcc)

========== .login file ============
if ("$1" =~ "intel") then
   module load intel/13.0.1
else
   module load gcc/4.7.2
endif

module load openmpi/1.6.3 opencl/1.1
===================================

////////////////
// GIT Commands
////////////////

To checkout the code

% git clone git@github.com:losalamos/CLAMR.git

