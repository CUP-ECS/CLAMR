# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
bin_PROGRAMS = clamr$(EXEEXT) clamr_gpuonly$(EXEEXT) \
	clamr_cpuonly$(EXEEXT) clamr_mpionly$(EXEEXT) \
	clamr_gpucheck$(EXEEXT) clamr_mpicheck$(EXEEXT) \
	clamr_checkall$(EXEEXT)
subdir = .
DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/configure ./config/compile ./config/config.guess \
	./config/config.sub ./config/depcomp ./config/install-sh \
	./config/ltmain.sh ./config/missing AUTHORS ChangeLog TODO
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/libtool.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 = clamr-clamr.$(OBJEXT) clamr-mesh.$(OBJEXT) \
	clamr-partition.$(OBJEXT) clamr-state.$(OBJEXT) \
	clamr-input.$(OBJEXT)
am__objects_2 = clamr-display.$(OBJEXT) clamr-reduce.$(OBJEXT)
am__objects_3 =
am_clamr_OBJECTS = $(am__objects_1) $(am__objects_2) $(am__objects_3)
clamr_OBJECTS = $(am_clamr_OBJECTS)
am__DEPENDENCIES_1 =
clamr_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la ezcl/libezcl.la \
	timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am__objects_4 = clamr_checkall-clamr_checkall.$(OBJEXT) \
	clamr_checkall-mesh.$(OBJEXT) \
	clamr_checkall-partition.$(OBJEXT) \
	clamr_checkall-state.$(OBJEXT) clamr_checkall-input.$(OBJEXT)
am__objects_5 = clamr_checkall-display.$(OBJEXT) \
	clamr_checkall-reduce.$(OBJEXT)
am_clamr_checkall_OBJECTS = $(am__objects_4) $(am__objects_5) \
	$(am__objects_3)
clamr_checkall_OBJECTS = $(am_clamr_checkall_OBJECTS)
clamr_checkall_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la ezcl/libezcl.la \
	timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am__objects_6 = clamr_cpuonly-clamr_cpuonly.$(OBJEXT) \
	clamr_cpuonly-mesh.$(OBJEXT) clamr_cpuonly-partition.$(OBJEXT) \
	clamr_cpuonly-state.$(OBJEXT) clamr_cpuonly-input.$(OBJEXT)
am__objects_7 = clamr_cpuonly-display.$(OBJEXT)
am_clamr_cpuonly_OBJECTS = $(am__objects_6) $(am__objects_7) \
	$(am__objects_3)
clamr_cpuonly_OBJECTS = $(am_clamr_cpuonly_OBJECTS)
clamr_cpuonly_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la timer/libtimer.la \
	genmalloc/libgenmalloc.la $(am__DEPENDENCIES_1)
am__objects_8 = clamr_gpucheck-clamr_gpucheck.$(OBJEXT) \
	clamr_gpucheck-mesh.$(OBJEXT) \
	clamr_gpucheck-partition.$(OBJEXT) \
	clamr_gpucheck-state.$(OBJEXT) clamr_gpucheck-input.$(OBJEXT)
am__objects_9 = clamr_gpucheck-display.$(OBJEXT) \
	clamr_gpucheck-reduce.$(OBJEXT)
am_clamr_gpucheck_OBJECTS = $(am__objects_8) $(am__objects_9) \
	$(am__objects_3)
clamr_gpucheck_OBJECTS = $(am_clamr_gpucheck_OBJECTS)
clamr_gpucheck_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la ezcl/libezcl.la \
	timer/libtimer.la genmalloc/libgenmalloc.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__objects_10 = clamr_gpuonly-clamr_gpuonly.$(OBJEXT) \
	clamr_gpuonly-mesh.$(OBJEXT) clamr_gpuonly-partition.$(OBJEXT) \
	clamr_gpuonly-state.$(OBJEXT) clamr_gpuonly-input.$(OBJEXT)
am__objects_11 = clamr_gpuonly-display.$(OBJEXT) \
	clamr_gpuonly-reduce.$(OBJEXT)
am_clamr_gpuonly_OBJECTS = $(am__objects_10) $(am__objects_11) \
	$(am__objects_3)
clamr_gpuonly_OBJECTS = $(am_clamr_gpuonly_OBJECTS)
clamr_gpuonly_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la ezcl/libezcl.la \
	timer/libtimer.la genmalloc/libgenmalloc.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__objects_12 = clamr_mpicheck-clamr_mpicheck.$(OBJEXT) \
	clamr_mpicheck-mesh.$(OBJEXT) \
	clamr_mpicheck-partition.$(OBJEXT) \
	clamr_mpicheck-state.$(OBJEXT) clamr_mpicheck-input.$(OBJEXT)
am__objects_13 = clamr_mpicheck-display.$(OBJEXT)
am_clamr_mpicheck_OBJECTS = $(am__objects_12) $(am__objects_13) \
	$(am__objects_3)
clamr_mpicheck_OBJECTS = $(am_clamr_mpicheck_OBJECTS)
clamr_mpicheck_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la timer/libtimer.la l7/libl7.la \
	genmalloc/libgenmalloc.la $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
am__objects_14 = clamr_mpionly-clamr_mpionly.$(OBJEXT) \
	clamr_mpionly-mesh.$(OBJEXT) clamr_mpionly-partition.$(OBJEXT) \
	clamr_mpionly-state.$(OBJEXT) clamr_mpionly-input.$(OBJEXT)
am__objects_15 = clamr_mpionly-display.$(OBJEXT)
am_clamr_mpionly_OBJECTS = $(am__objects_14) $(am__objects_15) \
	$(am__objects_3)
clamr_mpionly_OBJECTS = $(am_clamr_mpionly_OBJECTS)
clamr_mpionly_DEPENDENCIES = hsfc/libhsfc.la kdtree/libkdtree.la \
	zorder/libzorder.la s7/libs7.la timer/libtimer.la l7/libl7.la \
	genmalloc/libgenmalloc.la $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I.@am__isrc@
depcomp = $(SHELL) $(top_srcdir)/./config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(clamr_SOURCES) $(clamr_checkall_SOURCES) \
	$(clamr_cpuonly_SOURCES) $(clamr_gpucheck_SOURCES) \
	$(clamr_gpuonly_SOURCES) $(clamr_mpicheck_SOURCES) \
	$(clamr_mpionly_SOURCES)
DIST_SOURCES = $(clamr_SOURCES) $(clamr_checkall_SOURCES) \
	$(clamr_cpuonly_SOURCES) $(clamr_gpucheck_SOURCES) \
	$(clamr_gpuonly_SOURCES) $(clamr_mpicheck_SOURCES) \
	$(clamr_mpionly_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir dist dist-all distcheck
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d "$(distdir)" \
    || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr "$(distdir)"; }; }
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
HAVE_ADDR2LINE = @HAVE_ADDR2LINE@
INCLUDES = @INCLUDES@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
MPE_BIN = @MPE_BIN@
MPE_LIBS = @MPE_LIBS@
MPE_NOMPI_LIBS = @MPE_NOMPI_LIBS@
MPI_BIN = @MPI_BIN@
MPI_LIBS = @MPI_LIBS@
NM = @NM@
NMEDIT = @NMEDIT@
OBJEXT = @OBJEXT@
OPENCL_LIBS = @OPENCL_LIBS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
lt_ECHO = @lt_ECHO@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
SUBDIRS = l7 kdtree hsfc s7 timer ezcl zorder genmalloc
AM_MAKEFLAGS = -j
ACLOCAL_AMFLAGS = -I config

# -all-static flag is to make debugging easier. Removing it will enable dynamic libraries instead
clamr_CXX_SRCS = clamr.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_C_SRCS = display.c reduce.c
clamr_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h reduce.h
clamr_CPPFLAGS = -DHAVE_MPI=1 -DHAVE_OPENCL=1
clamr_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la ezcl/libezcl.la timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la -lm ${MPE_LIBS} ${MPI_LIBS} ${OPENCL_LIBS}
clamr_SOURCES = ${clamr_CXX_SRCS} ${clamr_C_SRCS} ${clamr_H_SRCS}
clamr_gpuonly_CXX_SRCS = clamr_gpuonly.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_gpuonly_C_SRCS = display.c reduce.c
clamr_gpuonly_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h reduce.h
clamr_gpuonly_CPPFLAGS = -UHAVE_MPI -DHAVE_OPENCL=1
clamr_gpuonly_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la ezcl/libezcl.la timer/libtimer.la genmalloc/libgenmalloc.la -lm ${MPE_NOMPI_LIBS} ${OPENCL_LIBS}
clamr_gpuonly_SOURCES = ${clamr_gpuonly_CXX_SRCS} ${clamr_gpuonly_C_SRCS} ${clamr_gpuonly_H_SRCS}
clamr_cpuonly_CXX_SRCS = clamr_cpuonly.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_cpuonly_C_SRCS = display.c
clamr_cpuonly_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h
clamr_cpuonly_CPPFLAGS = -UHAVE_MPI -UHAVE_OPENCL
clamr_cpuonly_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la timer/libtimer.la genmalloc/libgenmalloc.la -lm ${MPE_NOMPI_LIBS}
clamr_cpuonly_SOURCES = ${clamr_cpuonly_CXX_SRCS} ${clamr_cpuonly_C_SRCS} ${clamr_cpuonly_H_SRCS}
clamr_mpionly_CXX_SRCS = clamr_mpionly.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_mpionly_C_SRCS = display.c
clamr_mpionly_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h
clamr_mpionly_CPPFLAGS = -DHAVE_MPI=1 -UHAVE_OPENCL
clamr_mpionly_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la -lm ${MPE_LIBS} ${MPI_LIBS}
clamr_mpionly_SOURCES = ${clamr_mpionly_CXX_SRCS} ${clamr_mpionly_C_SRCS} ${clamr_mpionly_H_SRCS}
clamr_mpicheck_CXX_SRCS = clamr_mpicheck.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_mpicheck_C_SRCS = display.c
clamr_mpicheck_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h
clamr_mpicheck_CPPFLAGS = -DHAVE_MPI=1 -UHAVE_OPENCL
clamr_mpicheck_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la -lm ${MPE_LIBS} ${MPI_LIBS}
clamr_mpicheck_SOURCES = ${clamr_mpicheck_CXX_SRCS} ${clamr_mpicheck_C_SRCS} ${clamr_mpicheck_H_SRCS}
clamr_gpucheck_CXX_SRCS = clamr_gpucheck.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_gpucheck_C_SRCS = display.c reduce.c
clamr_gpucheck_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h reduce.h
clamr_gpucheck_CPPFLAGS = -UHAVE_MPI -DHAVE_OPENCL=1
clamr_gpucheck_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la ezcl/libezcl.la timer/libtimer.la genmalloc/libgenmalloc.la -lm ${MPE_NOMPI_LIBS} ${OPENCL_LIBS}
clamr_gpucheck_SOURCES = ${clamr_gpucheck_CXX_SRCS} ${clamr_gpucheck_C_SRCS} ${clamr_gpucheck_H_SRCS}
clamr_checkall_CXX_SRCS = clamr_checkall.cpp mesh.cpp partition.cpp state.cpp input.cpp
clamr_checkall_C_SRCS = display.c reduce.c 
clamr_checkall_H_SRCS = display.h mesh.h partition.h reorder.h state.h input.h reduce.h
clamr_checkall_CPPFLAGS = -DHAVE_MPI=1 -DHAVE_OPENCL=1
clamr_checkall_LDADD = hsfc/libhsfc.la kdtree/libkdtree.la zorder/libzorder.la s7/libs7.la ezcl/libezcl.la timer/libtimer.la l7/libl7.la genmalloc/libgenmalloc.la -lm ${MPE_LIBS} ${MPI_LIBS} ${OPENCL_LIBS}
clamr_checkall_SOURCES = ${clamr_checkall_CXX_SRCS} ${clamr_checkall_C_SRCS} ${clamr_checkall_H_SRCS}
EXTRA_DIST = wave_kern.cl wave_kern_calc.cl reduce.cl config.h clamr.xcodeproj/project.pbxproj clamr.1 fileamr.in AUTHORS ChangeLog runtests.sh newbatch.sh LICENSE
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
clamr$(EXEEXT): $(clamr_OBJECTS) $(clamr_DEPENDENCIES) 
	@rm -f clamr$(EXEEXT)
	$(CXXLINK) $(clamr_OBJECTS) $(clamr_LDADD) $(LIBS)
clamr_checkall$(EXEEXT): $(clamr_checkall_OBJECTS) $(clamr_checkall_DEPENDENCIES) 
	@rm -f clamr_checkall$(EXEEXT)
	$(CXXLINK) $(clamr_checkall_OBJECTS) $(clamr_checkall_LDADD) $(LIBS)
clamr_cpuonly$(EXEEXT): $(clamr_cpuonly_OBJECTS) $(clamr_cpuonly_DEPENDENCIES) 
	@rm -f clamr_cpuonly$(EXEEXT)
	$(CXXLINK) $(clamr_cpuonly_OBJECTS) $(clamr_cpuonly_LDADD) $(LIBS)
clamr_gpucheck$(EXEEXT): $(clamr_gpucheck_OBJECTS) $(clamr_gpucheck_DEPENDENCIES) 
	@rm -f clamr_gpucheck$(EXEEXT)
	$(CXXLINK) $(clamr_gpucheck_OBJECTS) $(clamr_gpucheck_LDADD) $(LIBS)
clamr_gpuonly$(EXEEXT): $(clamr_gpuonly_OBJECTS) $(clamr_gpuonly_DEPENDENCIES) 
	@rm -f clamr_gpuonly$(EXEEXT)
	$(CXXLINK) $(clamr_gpuonly_OBJECTS) $(clamr_gpuonly_LDADD) $(LIBS)
clamr_mpicheck$(EXEEXT): $(clamr_mpicheck_OBJECTS) $(clamr_mpicheck_DEPENDENCIES) 
	@rm -f clamr_mpicheck$(EXEEXT)
	$(CXXLINK) $(clamr_mpicheck_OBJECTS) $(clamr_mpicheck_LDADD) $(LIBS)
clamr_mpionly$(EXEEXT): $(clamr_mpionly_OBJECTS) $(clamr_mpionly_DEPENDENCIES) 
	@rm -f clamr_mpionly$(EXEEXT)
	$(CXXLINK) $(clamr_mpionly_OBJECTS) $(clamr_mpionly_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-clamr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-reduce.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-clamr_checkall.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-reduce.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_checkall-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_cpuonly-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-reduce.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpucheck-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-reduce.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_gpuonly-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpicheck-state.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-clamr_mpionly.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-display.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-mesh.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-partition.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clamr_mpionly-state.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<

clamr-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr-display.o -MD -MP -MF $(DEPDIR)/clamr-display.Tpo -c -o clamr-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr-display.Tpo $(DEPDIR)/clamr-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr-display.obj -MD -MP -MF $(DEPDIR)/clamr-display.Tpo -c -o clamr-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr-display.Tpo $(DEPDIR)/clamr-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr-reduce.o: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr-reduce.o -MD -MP -MF $(DEPDIR)/clamr-reduce.Tpo -c -o clamr-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr-reduce.Tpo $(DEPDIR)/clamr-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr-reduce.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c

clamr-reduce.obj: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr-reduce.obj -MD -MP -MF $(DEPDIR)/clamr-reduce.Tpo -c -o clamr-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr-reduce.Tpo $(DEPDIR)/clamr-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr-reduce.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`

clamr_checkall-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_checkall-display.o -MD -MP -MF $(DEPDIR)/clamr_checkall-display.Tpo -c -o clamr_checkall-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-display.Tpo $(DEPDIR)/clamr_checkall-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_checkall-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_checkall-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_checkall-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_checkall-display.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-display.Tpo -c -o clamr_checkall-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-display.Tpo $(DEPDIR)/clamr_checkall-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_checkall-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_checkall-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr_checkall-reduce.o: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_checkall-reduce.o -MD -MP -MF $(DEPDIR)/clamr_checkall-reduce.Tpo -c -o clamr_checkall-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-reduce.Tpo $(DEPDIR)/clamr_checkall-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_checkall-reduce.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_checkall-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c

clamr_checkall-reduce.obj: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_checkall-reduce.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-reduce.Tpo -c -o clamr_checkall-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-reduce.Tpo $(DEPDIR)/clamr_checkall-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_checkall-reduce.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_checkall-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`

clamr_cpuonly-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_cpuonly-display.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-display.Tpo -c -o clamr_cpuonly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-display.Tpo $(DEPDIR)/clamr_cpuonly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_cpuonly-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_cpuonly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_cpuonly-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_cpuonly-display.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-display.Tpo -c -o clamr_cpuonly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-display.Tpo $(DEPDIR)/clamr_cpuonly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_cpuonly-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_cpuonly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr_gpucheck-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpucheck-display.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-display.Tpo -c -o clamr_gpucheck-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-display.Tpo $(DEPDIR)/clamr_gpucheck-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_gpucheck-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpucheck-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_gpucheck-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpucheck-display.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-display.Tpo -c -o clamr_gpucheck-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-display.Tpo $(DEPDIR)/clamr_gpucheck-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_gpucheck-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpucheck-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr_gpucheck-reduce.o: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpucheck-reduce.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-reduce.Tpo -c -o clamr_gpucheck-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-reduce.Tpo $(DEPDIR)/clamr_gpucheck-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_gpucheck-reduce.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpucheck-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c

clamr_gpucheck-reduce.obj: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpucheck-reduce.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-reduce.Tpo -c -o clamr_gpucheck-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-reduce.Tpo $(DEPDIR)/clamr_gpucheck-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_gpucheck-reduce.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpucheck-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`

clamr_gpuonly-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpuonly-display.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-display.Tpo -c -o clamr_gpuonly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-display.Tpo $(DEPDIR)/clamr_gpuonly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_gpuonly-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpuonly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_gpuonly-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpuonly-display.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-display.Tpo -c -o clamr_gpuonly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-display.Tpo $(DEPDIR)/clamr_gpuonly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_gpuonly-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpuonly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr_gpuonly-reduce.o: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpuonly-reduce.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-reduce.Tpo -c -o clamr_gpuonly-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-reduce.Tpo $(DEPDIR)/clamr_gpuonly-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_gpuonly-reduce.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpuonly-reduce.o `test -f 'reduce.c' || echo '$(srcdir)/'`reduce.c

clamr_gpuonly-reduce.obj: reduce.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_gpuonly-reduce.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-reduce.Tpo -c -o clamr_gpuonly-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-reduce.Tpo $(DEPDIR)/clamr_gpuonly-reduce.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='reduce.c' object='clamr_gpuonly-reduce.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_gpuonly-reduce.obj `if test -f 'reduce.c'; then $(CYGPATH_W) 'reduce.c'; else $(CYGPATH_W) '$(srcdir)/reduce.c'; fi`

clamr_mpicheck-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_mpicheck-display.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-display.Tpo -c -o clamr_mpicheck-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-display.Tpo $(DEPDIR)/clamr_mpicheck-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_mpicheck-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_mpicheck-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_mpicheck-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_mpicheck-display.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-display.Tpo -c -o clamr_mpicheck-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-display.Tpo $(DEPDIR)/clamr_mpicheck-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_mpicheck-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_mpicheck-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

clamr_mpionly-display.o: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_mpionly-display.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-display.Tpo -c -o clamr_mpionly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-display.Tpo $(DEPDIR)/clamr_mpionly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_mpionly-display.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_mpionly-display.o `test -f 'display.c' || echo '$(srcdir)/'`display.c

clamr_mpionly-display.obj: display.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT clamr_mpionly-display.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-display.Tpo -c -o clamr_mpionly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-display.Tpo $(DEPDIR)/clamr_mpionly-display.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='display.c' object='clamr_mpionly-display.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o clamr_mpionly-display.obj `if test -f 'display.c'; then $(CYGPATH_W) 'display.c'; else $(CYGPATH_W) '$(srcdir)/display.c'; fi`

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

clamr-clamr.o: clamr.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-clamr.o -MD -MP -MF $(DEPDIR)/clamr-clamr.Tpo -c -o clamr-clamr.o `test -f 'clamr.cpp' || echo '$(srcdir)/'`clamr.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-clamr.Tpo $(DEPDIR)/clamr-clamr.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr.cpp' object='clamr-clamr.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-clamr.o `test -f 'clamr.cpp' || echo '$(srcdir)/'`clamr.cpp

clamr-clamr.obj: clamr.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-clamr.obj -MD -MP -MF $(DEPDIR)/clamr-clamr.Tpo -c -o clamr-clamr.obj `if test -f 'clamr.cpp'; then $(CYGPATH_W) 'clamr.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-clamr.Tpo $(DEPDIR)/clamr-clamr.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr.cpp' object='clamr-clamr.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-clamr.obj `if test -f 'clamr.cpp'; then $(CYGPATH_W) 'clamr.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr.cpp'; fi`

clamr-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-mesh.o -MD -MP -MF $(DEPDIR)/clamr-mesh.Tpo -c -o clamr-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-mesh.Tpo $(DEPDIR)/clamr-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-mesh.obj -MD -MP -MF $(DEPDIR)/clamr-mesh.Tpo -c -o clamr-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-mesh.Tpo $(DEPDIR)/clamr-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-partition.o -MD -MP -MF $(DEPDIR)/clamr-partition.Tpo -c -o clamr-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-partition.Tpo $(DEPDIR)/clamr-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-partition.obj -MD -MP -MF $(DEPDIR)/clamr-partition.Tpo -c -o clamr-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-partition.Tpo $(DEPDIR)/clamr-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-state.o -MD -MP -MF $(DEPDIR)/clamr-state.Tpo -c -o clamr-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-state.Tpo $(DEPDIR)/clamr-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-state.obj -MD -MP -MF $(DEPDIR)/clamr-state.Tpo -c -o clamr-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-state.Tpo $(DEPDIR)/clamr-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-input.o -MD -MP -MF $(DEPDIR)/clamr-input.Tpo -c -o clamr-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-input.Tpo $(DEPDIR)/clamr-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr-input.obj -MD -MP -MF $(DEPDIR)/clamr-input.Tpo -c -o clamr-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr-input.Tpo $(DEPDIR)/clamr-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_checkall-clamr_checkall.o: clamr_checkall.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-clamr_checkall.o -MD -MP -MF $(DEPDIR)/clamr_checkall-clamr_checkall.Tpo -c -o clamr_checkall-clamr_checkall.o `test -f 'clamr_checkall.cpp' || echo '$(srcdir)/'`clamr_checkall.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-clamr_checkall.Tpo $(DEPDIR)/clamr_checkall-clamr_checkall.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_checkall.cpp' object='clamr_checkall-clamr_checkall.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-clamr_checkall.o `test -f 'clamr_checkall.cpp' || echo '$(srcdir)/'`clamr_checkall.cpp

clamr_checkall-clamr_checkall.obj: clamr_checkall.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-clamr_checkall.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-clamr_checkall.Tpo -c -o clamr_checkall-clamr_checkall.obj `if test -f 'clamr_checkall.cpp'; then $(CYGPATH_W) 'clamr_checkall.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_checkall.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-clamr_checkall.Tpo $(DEPDIR)/clamr_checkall-clamr_checkall.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_checkall.cpp' object='clamr_checkall-clamr_checkall.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-clamr_checkall.obj `if test -f 'clamr_checkall.cpp'; then $(CYGPATH_W) 'clamr_checkall.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_checkall.cpp'; fi`

clamr_checkall-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-mesh.o -MD -MP -MF $(DEPDIR)/clamr_checkall-mesh.Tpo -c -o clamr_checkall-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-mesh.Tpo $(DEPDIR)/clamr_checkall-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_checkall-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_checkall-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-mesh.Tpo -c -o clamr_checkall-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-mesh.Tpo $(DEPDIR)/clamr_checkall-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_checkall-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_checkall-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-partition.o -MD -MP -MF $(DEPDIR)/clamr_checkall-partition.Tpo -c -o clamr_checkall-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-partition.Tpo $(DEPDIR)/clamr_checkall-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_checkall-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_checkall-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-partition.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-partition.Tpo -c -o clamr_checkall-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-partition.Tpo $(DEPDIR)/clamr_checkall-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_checkall-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_checkall-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-state.o -MD -MP -MF $(DEPDIR)/clamr_checkall-state.Tpo -c -o clamr_checkall-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-state.Tpo $(DEPDIR)/clamr_checkall-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_checkall-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_checkall-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-state.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-state.Tpo -c -o clamr_checkall-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-state.Tpo $(DEPDIR)/clamr_checkall-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_checkall-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_checkall-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-input.o -MD -MP -MF $(DEPDIR)/clamr_checkall-input.Tpo -c -o clamr_checkall-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-input.Tpo $(DEPDIR)/clamr_checkall-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_checkall-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_checkall-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_checkall-input.obj -MD -MP -MF $(DEPDIR)/clamr_checkall-input.Tpo -c -o clamr_checkall-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_checkall-input.Tpo $(DEPDIR)/clamr_checkall-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_checkall-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_checkall_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_checkall-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_cpuonly-clamr_cpuonly.o: clamr_cpuonly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-clamr_cpuonly.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Tpo -c -o clamr_cpuonly-clamr_cpuonly.o `test -f 'clamr_cpuonly.cpp' || echo '$(srcdir)/'`clamr_cpuonly.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Tpo $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_cpuonly.cpp' object='clamr_cpuonly-clamr_cpuonly.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-clamr_cpuonly.o `test -f 'clamr_cpuonly.cpp' || echo '$(srcdir)/'`clamr_cpuonly.cpp

clamr_cpuonly-clamr_cpuonly.obj: clamr_cpuonly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-clamr_cpuonly.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Tpo -c -o clamr_cpuonly-clamr_cpuonly.obj `if test -f 'clamr_cpuonly.cpp'; then $(CYGPATH_W) 'clamr_cpuonly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_cpuonly.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Tpo $(DEPDIR)/clamr_cpuonly-clamr_cpuonly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_cpuonly.cpp' object='clamr_cpuonly-clamr_cpuonly.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-clamr_cpuonly.obj `if test -f 'clamr_cpuonly.cpp'; then $(CYGPATH_W) 'clamr_cpuonly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_cpuonly.cpp'; fi`

clamr_cpuonly-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-mesh.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-mesh.Tpo -c -o clamr_cpuonly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-mesh.Tpo $(DEPDIR)/clamr_cpuonly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_cpuonly-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_cpuonly-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-mesh.Tpo -c -o clamr_cpuonly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-mesh.Tpo $(DEPDIR)/clamr_cpuonly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_cpuonly-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_cpuonly-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-partition.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-partition.Tpo -c -o clamr_cpuonly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-partition.Tpo $(DEPDIR)/clamr_cpuonly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_cpuonly-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_cpuonly-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-partition.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-partition.Tpo -c -o clamr_cpuonly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-partition.Tpo $(DEPDIR)/clamr_cpuonly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_cpuonly-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_cpuonly-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-state.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-state.Tpo -c -o clamr_cpuonly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-state.Tpo $(DEPDIR)/clamr_cpuonly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_cpuonly-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_cpuonly-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-state.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-state.Tpo -c -o clamr_cpuonly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-state.Tpo $(DEPDIR)/clamr_cpuonly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_cpuonly-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_cpuonly-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-input.o -MD -MP -MF $(DEPDIR)/clamr_cpuonly-input.Tpo -c -o clamr_cpuonly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-input.Tpo $(DEPDIR)/clamr_cpuonly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_cpuonly-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_cpuonly-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_cpuonly-input.obj -MD -MP -MF $(DEPDIR)/clamr_cpuonly-input.Tpo -c -o clamr_cpuonly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_cpuonly-input.Tpo $(DEPDIR)/clamr_cpuonly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_cpuonly-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_cpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_cpuonly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_gpucheck-clamr_gpucheck.o: clamr_gpucheck.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-clamr_gpucheck.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Tpo -c -o clamr_gpucheck-clamr_gpucheck.o `test -f 'clamr_gpucheck.cpp' || echo '$(srcdir)/'`clamr_gpucheck.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Tpo $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_gpucheck.cpp' object='clamr_gpucheck-clamr_gpucheck.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-clamr_gpucheck.o `test -f 'clamr_gpucheck.cpp' || echo '$(srcdir)/'`clamr_gpucheck.cpp

clamr_gpucheck-clamr_gpucheck.obj: clamr_gpucheck.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-clamr_gpucheck.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Tpo -c -o clamr_gpucheck-clamr_gpucheck.obj `if test -f 'clamr_gpucheck.cpp'; then $(CYGPATH_W) 'clamr_gpucheck.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_gpucheck.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Tpo $(DEPDIR)/clamr_gpucheck-clamr_gpucheck.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_gpucheck.cpp' object='clamr_gpucheck-clamr_gpucheck.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-clamr_gpucheck.obj `if test -f 'clamr_gpucheck.cpp'; then $(CYGPATH_W) 'clamr_gpucheck.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_gpucheck.cpp'; fi`

clamr_gpucheck-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-mesh.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-mesh.Tpo -c -o clamr_gpucheck-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-mesh.Tpo $(DEPDIR)/clamr_gpucheck-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_gpucheck-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_gpucheck-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-mesh.Tpo -c -o clamr_gpucheck-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-mesh.Tpo $(DEPDIR)/clamr_gpucheck-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_gpucheck-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_gpucheck-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-partition.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-partition.Tpo -c -o clamr_gpucheck-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-partition.Tpo $(DEPDIR)/clamr_gpucheck-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_gpucheck-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_gpucheck-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-partition.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-partition.Tpo -c -o clamr_gpucheck-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-partition.Tpo $(DEPDIR)/clamr_gpucheck-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_gpucheck-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_gpucheck-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-state.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-state.Tpo -c -o clamr_gpucheck-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-state.Tpo $(DEPDIR)/clamr_gpucheck-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_gpucheck-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_gpucheck-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-state.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-state.Tpo -c -o clamr_gpucheck-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-state.Tpo $(DEPDIR)/clamr_gpucheck-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_gpucheck-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_gpucheck-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-input.o -MD -MP -MF $(DEPDIR)/clamr_gpucheck-input.Tpo -c -o clamr_gpucheck-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-input.Tpo $(DEPDIR)/clamr_gpucheck-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_gpucheck-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_gpucheck-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpucheck-input.obj -MD -MP -MF $(DEPDIR)/clamr_gpucheck-input.Tpo -c -o clamr_gpucheck-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpucheck-input.Tpo $(DEPDIR)/clamr_gpucheck-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_gpucheck-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpucheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpucheck-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_gpuonly-clamr_gpuonly.o: clamr_gpuonly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-clamr_gpuonly.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Tpo -c -o clamr_gpuonly-clamr_gpuonly.o `test -f 'clamr_gpuonly.cpp' || echo '$(srcdir)/'`clamr_gpuonly.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Tpo $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_gpuonly.cpp' object='clamr_gpuonly-clamr_gpuonly.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-clamr_gpuonly.o `test -f 'clamr_gpuonly.cpp' || echo '$(srcdir)/'`clamr_gpuonly.cpp

clamr_gpuonly-clamr_gpuonly.obj: clamr_gpuonly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-clamr_gpuonly.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Tpo -c -o clamr_gpuonly-clamr_gpuonly.obj `if test -f 'clamr_gpuonly.cpp'; then $(CYGPATH_W) 'clamr_gpuonly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_gpuonly.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Tpo $(DEPDIR)/clamr_gpuonly-clamr_gpuonly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_gpuonly.cpp' object='clamr_gpuonly-clamr_gpuonly.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-clamr_gpuonly.obj `if test -f 'clamr_gpuonly.cpp'; then $(CYGPATH_W) 'clamr_gpuonly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_gpuonly.cpp'; fi`

clamr_gpuonly-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-mesh.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-mesh.Tpo -c -o clamr_gpuonly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-mesh.Tpo $(DEPDIR)/clamr_gpuonly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_gpuonly-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_gpuonly-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-mesh.Tpo -c -o clamr_gpuonly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-mesh.Tpo $(DEPDIR)/clamr_gpuonly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_gpuonly-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_gpuonly-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-partition.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-partition.Tpo -c -o clamr_gpuonly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-partition.Tpo $(DEPDIR)/clamr_gpuonly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_gpuonly-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_gpuonly-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-partition.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-partition.Tpo -c -o clamr_gpuonly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-partition.Tpo $(DEPDIR)/clamr_gpuonly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_gpuonly-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_gpuonly-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-state.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-state.Tpo -c -o clamr_gpuonly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-state.Tpo $(DEPDIR)/clamr_gpuonly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_gpuonly-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_gpuonly-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-state.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-state.Tpo -c -o clamr_gpuonly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-state.Tpo $(DEPDIR)/clamr_gpuonly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_gpuonly-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_gpuonly-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-input.o -MD -MP -MF $(DEPDIR)/clamr_gpuonly-input.Tpo -c -o clamr_gpuonly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-input.Tpo $(DEPDIR)/clamr_gpuonly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_gpuonly-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_gpuonly-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_gpuonly-input.obj -MD -MP -MF $(DEPDIR)/clamr_gpuonly-input.Tpo -c -o clamr_gpuonly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_gpuonly-input.Tpo $(DEPDIR)/clamr_gpuonly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_gpuonly-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_gpuonly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_gpuonly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_mpicheck-clamr_mpicheck.o: clamr_mpicheck.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-clamr_mpicheck.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Tpo -c -o clamr_mpicheck-clamr_mpicheck.o `test -f 'clamr_mpicheck.cpp' || echo '$(srcdir)/'`clamr_mpicheck.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Tpo $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_mpicheck.cpp' object='clamr_mpicheck-clamr_mpicheck.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-clamr_mpicheck.o `test -f 'clamr_mpicheck.cpp' || echo '$(srcdir)/'`clamr_mpicheck.cpp

clamr_mpicheck-clamr_mpicheck.obj: clamr_mpicheck.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-clamr_mpicheck.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Tpo -c -o clamr_mpicheck-clamr_mpicheck.obj `if test -f 'clamr_mpicheck.cpp'; then $(CYGPATH_W) 'clamr_mpicheck.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_mpicheck.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Tpo $(DEPDIR)/clamr_mpicheck-clamr_mpicheck.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_mpicheck.cpp' object='clamr_mpicheck-clamr_mpicheck.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-clamr_mpicheck.obj `if test -f 'clamr_mpicheck.cpp'; then $(CYGPATH_W) 'clamr_mpicheck.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_mpicheck.cpp'; fi`

clamr_mpicheck-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-mesh.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-mesh.Tpo -c -o clamr_mpicheck-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-mesh.Tpo $(DEPDIR)/clamr_mpicheck-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_mpicheck-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_mpicheck-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-mesh.Tpo -c -o clamr_mpicheck-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-mesh.Tpo $(DEPDIR)/clamr_mpicheck-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_mpicheck-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_mpicheck-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-partition.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-partition.Tpo -c -o clamr_mpicheck-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-partition.Tpo $(DEPDIR)/clamr_mpicheck-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_mpicheck-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_mpicheck-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-partition.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-partition.Tpo -c -o clamr_mpicheck-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-partition.Tpo $(DEPDIR)/clamr_mpicheck-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_mpicheck-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_mpicheck-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-state.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-state.Tpo -c -o clamr_mpicheck-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-state.Tpo $(DEPDIR)/clamr_mpicheck-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_mpicheck-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_mpicheck-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-state.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-state.Tpo -c -o clamr_mpicheck-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-state.Tpo $(DEPDIR)/clamr_mpicheck-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_mpicheck-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_mpicheck-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-input.o -MD -MP -MF $(DEPDIR)/clamr_mpicheck-input.Tpo -c -o clamr_mpicheck-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-input.Tpo $(DEPDIR)/clamr_mpicheck-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_mpicheck-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_mpicheck-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpicheck-input.obj -MD -MP -MF $(DEPDIR)/clamr_mpicheck-input.Tpo -c -o clamr_mpicheck-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpicheck-input.Tpo $(DEPDIR)/clamr_mpicheck-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_mpicheck-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpicheck_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpicheck-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

clamr_mpionly-clamr_mpionly.o: clamr_mpionly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-clamr_mpionly.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-clamr_mpionly.Tpo -c -o clamr_mpionly-clamr_mpionly.o `test -f 'clamr_mpionly.cpp' || echo '$(srcdir)/'`clamr_mpionly.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-clamr_mpionly.Tpo $(DEPDIR)/clamr_mpionly-clamr_mpionly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_mpionly.cpp' object='clamr_mpionly-clamr_mpionly.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-clamr_mpionly.o `test -f 'clamr_mpionly.cpp' || echo '$(srcdir)/'`clamr_mpionly.cpp

clamr_mpionly-clamr_mpionly.obj: clamr_mpionly.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-clamr_mpionly.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-clamr_mpionly.Tpo -c -o clamr_mpionly-clamr_mpionly.obj `if test -f 'clamr_mpionly.cpp'; then $(CYGPATH_W) 'clamr_mpionly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_mpionly.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-clamr_mpionly.Tpo $(DEPDIR)/clamr_mpionly-clamr_mpionly.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='clamr_mpionly.cpp' object='clamr_mpionly-clamr_mpionly.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-clamr_mpionly.obj `if test -f 'clamr_mpionly.cpp'; then $(CYGPATH_W) 'clamr_mpionly.cpp'; else $(CYGPATH_W) '$(srcdir)/clamr_mpionly.cpp'; fi`

clamr_mpionly-mesh.o: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-mesh.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-mesh.Tpo -c -o clamr_mpionly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-mesh.Tpo $(DEPDIR)/clamr_mpionly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_mpionly-mesh.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-mesh.o `test -f 'mesh.cpp' || echo '$(srcdir)/'`mesh.cpp

clamr_mpionly-mesh.obj: mesh.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-mesh.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-mesh.Tpo -c -o clamr_mpionly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-mesh.Tpo $(DEPDIR)/clamr_mpionly-mesh.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='mesh.cpp' object='clamr_mpionly-mesh.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-mesh.obj `if test -f 'mesh.cpp'; then $(CYGPATH_W) 'mesh.cpp'; else $(CYGPATH_W) '$(srcdir)/mesh.cpp'; fi`

clamr_mpionly-partition.o: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-partition.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-partition.Tpo -c -o clamr_mpionly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-partition.Tpo $(DEPDIR)/clamr_mpionly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_mpionly-partition.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-partition.o `test -f 'partition.cpp' || echo '$(srcdir)/'`partition.cpp

clamr_mpionly-partition.obj: partition.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-partition.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-partition.Tpo -c -o clamr_mpionly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-partition.Tpo $(DEPDIR)/clamr_mpionly-partition.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='partition.cpp' object='clamr_mpionly-partition.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-partition.obj `if test -f 'partition.cpp'; then $(CYGPATH_W) 'partition.cpp'; else $(CYGPATH_W) '$(srcdir)/partition.cpp'; fi`

clamr_mpionly-state.o: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-state.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-state.Tpo -c -o clamr_mpionly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-state.Tpo $(DEPDIR)/clamr_mpionly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_mpionly-state.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-state.o `test -f 'state.cpp' || echo '$(srcdir)/'`state.cpp

clamr_mpionly-state.obj: state.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-state.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-state.Tpo -c -o clamr_mpionly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-state.Tpo $(DEPDIR)/clamr_mpionly-state.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='state.cpp' object='clamr_mpionly-state.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-state.obj `if test -f 'state.cpp'; then $(CYGPATH_W) 'state.cpp'; else $(CYGPATH_W) '$(srcdir)/state.cpp'; fi`

clamr_mpionly-input.o: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-input.o -MD -MP -MF $(DEPDIR)/clamr_mpionly-input.Tpo -c -o clamr_mpionly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-input.Tpo $(DEPDIR)/clamr_mpionly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_mpionly-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

clamr_mpionly-input.obj: input.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT clamr_mpionly-input.obj -MD -MP -MF $(DEPDIR)/clamr_mpionly-input.Tpo -c -o clamr_mpionly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/clamr_mpionly-input.Tpo $(DEPDIR)/clamr_mpionly-input.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='input.cpp' object='clamr_mpionly-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(clamr_mpionly_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o clamr_mpionly-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool config.lt

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@$(am__cd) '$(distuninstallcheck_dir)' \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) config.h
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-local distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) all \
	ctags-recursive install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am am--refresh check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags ctags-recursive dist \
	dist-all dist-bzip2 dist-gzip dist-lzma dist-shar dist-tarZ \
	dist-xz dist-zip distcheck distclean distclean-compile \
	distclean-generic distclean-hdr distclean-libtool \
	distclean-local distclean-tags distcleancheck distdir \
	distuninstallcheck dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS


l7/libl7.la:
	cd l7; make

hsfc/libhsfc.la:
	cd hsfc; make

kdtree/libkdtree.la:
	cd kdtree; make

zorder/libzorder.la:
	cd zorder; make

s7/libs7.la:
	cd s7; make

ezcl/libezcl.la:
	cd ezcl; make

timer/libtimer.la:
	cd timer; make

genmalloc/libgenmalloc.la:
	cd genmalloc; make

distclean-local:
	rm -f config.h.in~
	rm -rf autom4te.cache
	rm -rf config.log config.status

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
