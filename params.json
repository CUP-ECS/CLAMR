{"name":"CLAMR","tagline":"Cell-Based Adaptive Mesh Refinement","body":"The CLAMR code is a cell-based adaptive mesh refinement (AMR) mini-app developed\r\nas a testbed for hybrid algorithm development using MPI and OpenCL GPU code. \r\n\r\nThe CLAMR code is open-source under its LANL copyright\r\n/*\r\n *  Copyright (c) 2011-2012, Los Alamos National Security, LLC.\r\n *  All rights Reserved.\r\n *\r\n *  See LICENSE file for full copyright \r\n */\r\n\r\nContributions to CLAMR are welcomed as long as they do not substantially change\r\nthe nature of the code.\r\n\r\nTo build the CLAMR executables. CLAMR now uses cmake for its builds\r\n\r\n// In-tree build\r\n\r\n    cmake .\r\n\r\n// out-of-tree build\r\n\r\n    cmake <path-to-source>\r\n\r\n\r\n// Optimized build (part optimized RelWithDebInfo is default)\r\n\r\n    cmake -DCMAKE_BUILD_TYPE=release .\r\n\r\n// Graphics options (OpenGL is the default)\r\n\r\n    cmake -DGRAPHICS_TYPE=[None|OpenGL|MPE] <path-to-source>\r\n\r\nThere are two real-time graphics packages. The default is OpenGL. An alternative\r\nreal-time graphics package uses MPE. To use this package, configure with \r\n\"cmake -DGRAPHICS_TYPE=MPE\". The OpenGL option is automatically turned off when\r\nselecting MPE. MPE is part of the MPICH package from Argonne National Laboratory.\r\nIt usually is not on a system and will need to be installed. A setup script and\r\nversion 1.9.1 of the MPE package are available in the download directory.\r\n\r\nBuild the executables:\r\n\r\n    make or make VERBOSE=1\r\n\r\nNine executables are currently built. The first six are \"standalone\" versions which\r\nrun one implementation of the routines\r\n\r\n* clamr: Calls the MPI/GPU versions of each call.\r\n* clamr_gpuonly: Calls the GPU versions of each call.\r\n* clamr_cpuonly: Calls the CPU versions of each call.\r\n* clamr_mpionly: Calls the MPI versions of each call.\r\n* clamr_openmponly: Compiles with the OpemMP compiler flags.\r\n* clamr_mpiopenmponly: Compiles with both MPI and OpenMP.\r\n\r\nCheck versions. These versions run multiple implementations and check correctness of\r\nthe implementations\r\n\r\n* clamr_gpucheck: Calls the GPU and CPU versions of each call and checks the results against each other\r\n* clamr_mpicheck: Calls the CPU and MPI/CPU versions of each call and checks the results against each other\r\n* clamr_checkall: Calls the GPU, CPU, MPI and GPU/MPI versions of each call and checks the results against each other.\r\n\r\nCurrently the executables run only on NVIDIA GPUs. Fixing the kernels to run on\r\nATI GPUs and MIC is of great interest\r\n\r\nThe numerical algorithm still does not handle \"dry\" conditions properly and will\r\ncrash if parts of the simulation reach a zero height\r\n\r\nMany other limitations exist\r\n\r\nCurrent performance shows about a 25x speedup on the GPU versus the CPU using NVIDIA\r\nTesla 2090s and Intel CPUs\r\n\r\nSee the PAPERS file for a list of publications related to the CLAMR code (Papers.bib for \r\nbibtex format)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}